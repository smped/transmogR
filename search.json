[{"path":[]},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a Variant-Modified Reference","text":"incorporation personalised population-level variants reference genome shown significant impact subsequent alignments (Kaminow et al. 2022). Whilst implemented splice-aware alignment RNA-Seq data using STARconsensus, package transmogR enables creation variant-modified reference transcriptome use pseudo aligners salmon (Srivastava et al. 2020). addition, multiple visualisation summarisation methods included cursory analysis custom variant sets used. Whilst subsequent code demonstrated small genomic region, complete process creating modified reference can run 20 minutes using 4 cores. Importantly, expected user carefully prepared set variants following exact variant types included. SNV/SNP: associated range must width 1 single base replacement allele Insertions: position replaced must single nucleotide replacement bases > 1nt Deletions: position replaced must > 1nt, whilst replacement allele must single base variants conform criteria likely cause series frustrating errors attempting use package.","code":""},{"path":[]},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"installation","dir":"Articles","previous_headings":"Setup","what":"Installation","title":"Creating a Variant-Modified Reference","text":"order perform operations vignette, following packages require installation. packages installed, can load easily","code":"if (!\"BiocManager\" %in% rownames(installed.packages()))   install.packages(\"BiocManager\") BiocManager::install(\"transmogR\") library(VariantAnnotation) library(rtracklayer) library(extraChIPs) library(transmogR) library(BSgenome.Hsapiens.UCSC.hg38)"},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"required-data","dir":"Articles","previous_headings":"Setup","what":"Required Data","title":"Creating a Variant-Modified Reference","text":"order create modified reference, three primary data objects required: 1) reference genome; 2) set genomic variants; 3) set exon-level co-ordinates defining transcript structure. vignette, ’ll use GRCh38 primary reference genome, restricting sequences chr1 . package can take either DNAStringSet BSgenome object reference genome. small set variants provided package. additional set transcripts derived Gencode v441 also provided. Splitting gtf feature types can also handy downstream processes.","code":"chr1 <- getSeq(BSgenome.Hsapiens.UCSC.hg38, \"chr1\") chr1 <- as(chr1, \"DNAStringSet\") names(chr1) <- \"chr1\" chr1 ## DNAStringSet object of length 1: ##         width seq                                           names                ## [1] 248956422 NNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNN chr1 sq <- seqinfo(chr1) genome(sq) <- \"GRCh38\" vcf <- system.file(\"extdata/1000GP_subset.vcf.gz\", package = \"transmogR\") vcf_param <- ScanVcfParam(fixed = \"ALT\", info = NA, which = GRanges(sq)) var <- rowRanges(readVcf(vcf, param = vcf_param)) seqinfo(var) <- sq var ## GRanges object with 100 ranges and 3 metadata columns: ##                         seqnames        ranges strand | paramRangeID ##                            <Rle>     <IRanges>  <Rle> |     <factor> ##            1:113969:C:T     chr1        113969      * |         chr1 ##            1:121009:C:T     chr1        121009      * |         chr1 ##            1:123511:G:A     chr1        123511      * |         chr1 ##            1:126113:C:A     chr1        126113      * |         chr1 ##            1:128798:C:T     chr1        128798      * |         chr1 ##                     ...      ...           ...    ... .          ... ##            1:839405:G:A     chr1        839405      * |         chr1 ##   1:839480:CACACACCTG:C     chr1 839480-839494      * |         chr1 ##   1:839515:CTAGACACAC:C     chr1 839515-839543      * |         chr1 ##            1:840046:G:A     chr1        840046      * |         chr1 ##            1:840279:A:G     chr1        840279      * |         chr1 ##                                             REF                ALT ##                                  <DNAStringSet> <DNAStringSetList> ##            1:113969:C:T                       C                  T ##            1:121009:C:T                       C                  T ##            1:123511:G:A                       G                  A ##            1:126113:C:A                       C                  A ##            1:128798:C:T                       C                  T ##                     ...                     ...                ... ##            1:839405:G:A                       G                  A ##   1:839480:CACACACCTG:C         CACACACCTGGACAA                  C ##   1:839515:CTAGACACAC:C CTAGACACAC...CACACACACG                  C ##            1:840046:G:A                       G                  A ##            1:840279:A:G                       A                  G ##   ------- ##   seqinfo: 1 sequence from GRCh38 genome f <- system.file(\"extdata/gencode.v44.subset.gtf.gz\", package = \"transmogR\") gtf <- import.gff(f, which = GRanges(sq)) seqinfo(gtf) <- sq gtf ## GRanges object with 603 ranges and 11 metadata columns: ##         seqnames        ranges strand |      source       type     score ##            <Rle>     <IRanges>  <Rle> |    <factor>   <factor> <numeric> ##     [1]     chr1  89295-133723      - | rtracklayer gene              NA ##     [2]     chr1  89295-120932      - | rtracklayer transcript        NA ##     [3]     chr1 120775-120932      - | rtracklayer exon              NA ##     [4]     chr1 112700-112804      - | rtracklayer exon              NA ##     [5]     chr1   92091-92240      - | rtracklayer exon              NA ##     ...      ...           ...    ... .         ...        ...       ... ##   [599]     chr1 852671-852766      + | rtracklayer exon              NA ##   [600]     chr1 853391-854096      + | rtracklayer exon              NA ##   [601]     chr1 851348-852752      + | rtracklayer transcript        NA ##   [602]     chr1 851348-852110      + | rtracklayer exon              NA ##   [603]     chr1 852671-852752      + | rtracklayer exon              NA ##             phase            gene_id   gene_type       gene_name ##         <integer>        <character> <character>     <character> ##     [1]      <NA>  ENSG00000238009.6      lncRNA ENSG00000238009 ##     [2]      <NA>  ENSG00000238009.6      lncRNA ENSG00000238009 ##     [3]      <NA>  ENSG00000238009.6      lncRNA ENSG00000238009 ##     [4]      <NA>  ENSG00000238009.6      lncRNA ENSG00000238009 ##     [5]      <NA>  ENSG00000238009.6      lncRNA ENSG00000238009 ##     ...       ...                ...         ...             ... ##   [599]      <NA> ENSG00000228794.12      lncRNA       LINC01128 ##   [600]      <NA> ENSG00000228794.12      lncRNA       LINC01128 ##   [601]      <NA> ENSG00000228794.12      lncRNA       LINC01128 ##   [602]      <NA> ENSG00000228794.12      lncRNA       LINC01128 ##   [603]      <NA> ENSG00000228794.12      lncRNA       LINC01128 ##             transcript_id transcript_type transcript_name exon_number ##               <character>     <character>     <character> <character> ##     [1]              <NA>            <NA>            <NA>        <NA> ##     [2] ENST00000466430.5          lncRNA ENST00000466430        <NA> ##     [3] ENST00000466430.5          lncRNA ENST00000466430           1 ##     [4] ENST00000466430.5          lncRNA ENST00000466430           2 ##     [5] ENST00000466430.5          lncRNA ENST00000466430           3 ##     ...               ...             ...             ...         ... ##   [599] ENST00000688420.1          lncRNA   LINC01128-235           4 ##   [600] ENST00000688420.1          lncRNA   LINC01128-235           5 ##   [601] ENST00000425657.1 retained_intron   LINC01128-203        <NA> ##   [602] ENST00000425657.1 retained_intron   LINC01128-203           1 ##   [603] ENST00000425657.1 retained_intron   LINC01128-203           2 ##   ------- ##   seqinfo: 1 sequence from GRCh38 genome gtf <- splitAsList(gtf, gtf$type)"},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"inspecting-variants","dir":"Articles","previous_headings":"","what":"Inspecting Variants","title":"Creating a Variant-Modified Reference","text":"Knowing variants lie, relate can informative, , simple visualisation summarisation functions included. following, can check see many exons directly overlap variant, showing many unique genes summarises . ids, don’t overlap variants also described plot title. Included variants overlap exonic sequences, summarised unique gene ids addition, can obtain simple breakdown overlapping regions using GRangesList. can use function defineRegions() extraChIPs define regions based gene & transcript locations. function assigns position genome uniquely given feature hierarchically, using provided transcripts, meaning exons considered promoters. ensure exons included exons, can just substitute values gtf feature type.","code":"upsetVarByCol(gtf$exon, var, mcol = \"gene_id\") regions <- defineRegions(gtf$gene, gtf$transcript, gtf$exon, proximal = 0) regions$exon <- granges(gtf$exon) overlapsByVar(regions, var) ##                   Deletion Insertion SNV Total ## promoter                 1         1  46    48 ## upstream_promoter        0         0  20    20 ## exon                     0         1  37    38 ## intron                   5         0  24    29 ## intergenic               0         0   0     0"},{"path":[]},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"modifying-a-reference-genome","dir":"Articles","previous_headings":"Creating Modified Reference Sequences","what":"Modifying a Reference Genome","title":"Creating a Variant-Modified Reference","text":"simplest method modifying reference genome simply call genomogrify() either DNAStringSet BSgenome object. tag can optionally added sequence names avoid confusion. new reference genome can exported fasta format using writeXStringSet().","code":"chr1_mod <- genomogrify(chr1, var, tag = \"mod\") chr1_mod ## DNAStringSet object of length 1: ##         width seq                                           names                ## [1] 248956362 NNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNN chr1_mod"},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"modifying-a-reference-transcriptome","dir":"Articles","previous_headings":"Creating Modified Reference Sequences","what":"Modifying a Reference Transcriptome","title":"Creating a Variant-Modified Reference","text":"process creating variant-modified reference transcriptome essentially , addition exon-level co-ordinates set transcripts. optional tag can added transcripts indicate modified, additional tag able included indicates type variant incorporated new transcript sequence. Variant tags one s, d indicate SNV, Insertions Deletions respectively. example dataset, one transcript contains SNVs insertion. can simply exported using writeXStringSet(). using decoy transcripts salmon, gentrome can also simply exported combining two modified references. processes rely lower-level functions owl() indelcator() overwrite letters substitute indels respectively. also able called individually shown help pages.","code":"trans_mod <- transmogrify(     chr1, var, gtf$exon, tag = \"mod\", var_tags = TRUE ) trans_mod ## DNAStringSet object of length 112: ##       width seq                                             names                ##   [1]  1947 ACCCTCCTTGAGACAGCCCTCC...TAAACAATACACACGTGTTAAA ENST00000326734.2... ##   [2]  1702 CACACCGTGAGCTGCTGAGACG...GTGCAGGGCACAGGTGGGCGCC ENST00000357876.6 ##   [3]  1358 AATCAGAACTCGCGGTGGGGGC...ATAAAATTAATGAGAATGATCT ENST00000412115.2... ##   [4]   421 GACAGGGTCTCCCTCTGTTGTC...AAAGCATCCAGGATTCAATGAA ENST00000414688.6 ##   [5]   894 CTGCAATACCTCACTCAATCTC...GTATTTGATGGCCTCTGTTGTT ENST00000415295.1 ##   ...   ... ... ## [108]  3097 GCCAGTGTCTCCGCCGGTTGAA...GATAAAACTTAAAAATATCCCC ENST00000701768.1 ## [109]  1601 GGAGTGCGTTCGGTGCGCCGTG...AGCTATTAAAAGAGACAGAGGC ENST00000702098.1 ## [110]  1432 GTCTGCGTCGGGTTCTGTTGGA...ATCAATAAAAATTTAAATGCTC ENST00000702273.1 ## [111]  1460 CTGTTAGGTAAGAGGCGCGTGA...ATCAATAAAAATTTAAATGCTC ENST00000702557.1 ## [112]  1651 GTTAGGTAAGAGGCGCGTGAGG...GCTATTAAAAGAGACAGAGGCA ENST00000702847.1 names(trans_mod)[grepl(\"_si\", names(trans_mod))] ## [1] \"ENST00000473798.2_mod_si\""},{"path":[]},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"pseudo-autosomal-regions-par-y","dir":"Articles","previous_headings":"Additional Capabilities","what":"Pseudo-Autosomal Regions (PAR-Y)","title":"Creating a Variant-Modified Reference","text":"Beyond lower-level functions, PAR-Y regions hg38, hg19 CHM13 able obtained using parY() passing appropriate seqinfo object. seqinfo object checks length Y-chromosome guesses reference genome used. user wishes exclude transcripts PAR-Y region, ranges can passed transmogrify() transcripts overlap PAR-Y region excluded. Alternatively, passing entire Y-chromosome transmogrify() exclude transcripts Y-chromosome, may preferred female-specific references. regions can also passed genomogrify() mask, bases within masked region re-assigned N.","code":"sq_hg38 <- seqinfo(BSgenome.Hsapiens.UCSC.hg38) parY(sq_hg38) ## GRanges object with 2 ranges and 1 metadata column: ##       seqnames            ranges strand |         PAR ##          <Rle>         <IRanges>  <Rle> | <character> ##   [1]     chrY     10001-2781479      * |        PAR1 ##   [2]     chrY 56887903-57217415      * |        PAR2 ##   ------- ##   seqinfo: 711 sequences (1 circular) from hg38 genome"},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"splice-junctions","dir":"Articles","previous_headings":"Additional Capabilities","what":"Splice Junctions","title":"Creating a Variant-Modified Reference","text":"addition, set splice junctions associated transcript can obtained using known exons. Many splice junctions shared across multiple transcripts, returned set junctions can also simplified using chopMC() extraChIPs. alternative, splice junctions can returned set interactions, donor sites assigned anchorOne element, acceptor sites placed anchorTwo element enables identification splice junctions specific transcripts.","code":"ec <- c(\"transcript_id\", \"transcript_name\", \"gene_id\", \"gene_name\") sj <- sjFromExons(gtf$exon, extra_cols = ec) sj ## GRanges object with 730 ranges and 6 metadata columns: ##         seqnames        ranges strand |        site     transcript_id ##            <Rle>     <IRanges>  <Rle> | <character>       <character> ##     [1]     chr1 182745-182752      + |       donor ENST00000624431.2 ##     [2]     chr1 183128-183132      + |    acceptor ENST00000624431.2 ##     [3]     chr1 183215-183222      + |       donor ENST00000624431.2 ##     [4]     chr1 183490-183494      + |    acceptor ENST00000624431.2 ##     [5]     chr1 183570-183577      + |       donor ENST00000624431.2 ##     ...      ...           ...    ... .         ...               ... ##   [726]     chr1 810061-810068      - |       donor ENST00000590817.3 ##   [727]     chr1 810170-810174      - |    acceptor ENST00000447500.4 ##   [728]     chr1 817367-817374      - |       donor ENST00000447500.4 ##   [729]     chr1 827664-827671      - |       donor ENST00000635509.2 ##   [730]     chr1 827664-827671      - |       donor ENST00000634337.2 ##         transcript_name            gene_id       gene_name exon_number ##             <character>        <character>     <character>   <integer> ##     [1]    DDX11L17-201  ENSG00000279928.2        DDX11L17           1 ##     [2]    DDX11L17-201  ENSG00000279928.2        DDX11L17           2 ##     [3]    DDX11L17-201  ENSG00000279928.2        DDX11L17           2 ##     [4]    DDX11L17-201  ENSG00000279928.2        DDX11L17           3 ##     [5]    DDX11L17-201  ENSG00000279928.2        DDX11L17           3 ##     ...             ...                ...             ...         ... ##   [726] ENST00000590817  ENSG00000230092.8 ENSG00000230092           1 ##   [727] ENST00000447500  ENSG00000290784.1 ENSG00000290784           2 ##   [728] ENST00000447500  ENSG00000290784.1 ENSG00000290784           1 ##   [729] ENST00000635509 ENSG00000230021.10 ENSG00000230021           1 ##   [730] ENST00000634337 ENSG00000230021.10 ENSG00000230021           1 ##   ------- ##   seqinfo: 1 sequence from GRCh38 genome chopMC(sj) ## GRanges object with 196 ranges and 6 metadata columns: ##         seqnames        ranges strand |        site ##            <Rle>     <IRanges>  <Rle> | <character> ##     [1]     chr1 182745-182752      + |       donor ##     [2]     chr1 183128-183132      + |    acceptor ##     [3]     chr1 183215-183222      + |       donor ##     [4]     chr1 183490-183494      + |    acceptor ##     [5]     chr1 183570-183577      + |       donor ##     ...      ...           ...    ... .         ... ##   [192]     chr1 808623-808627      - |    acceptor ##   [193]     chr1 810061-810068      - |       donor ##   [194]     chr1 810170-810174      - |    acceptor ##   [195]     chr1 817367-817374      - |       donor ##   [196]     chr1 827664-827671      - |       donor ##                               transcript_id                 transcript_name ##                             <CharacterList>                 <CharacterList> ##     [1]                   ENST00000624431.2                    DDX11L17-201 ##     [2]                   ENST00000624431.2                    DDX11L17-201 ##     [3]                   ENST00000624431.2                    DDX11L17-201 ##     [4]                   ENST00000624431.2                    DDX11L17-201 ##     [5]                   ENST00000624431.2                    DDX11L17-201 ##     ...                                 ...                             ... ##   [192] ENST00000447500.4,ENST00000590817.3 ENST00000447500,ENST00000590817 ##   [193] ENST00000447500.4,ENST00000590817.3 ENST00000447500,ENST00000590817 ##   [194]                   ENST00000447500.4                 ENST00000447500 ##   [195]                   ENST00000447500.4                 ENST00000447500 ##   [196] ENST00000635509.2,ENST00000634337.2 ENST00000635509,ENST00000634337 ##                                       gene_id                       gene_name ##                               <CharacterList>                 <CharacterList> ##     [1]                     ENSG00000279928.2                        DDX11L17 ##     [2]                     ENSG00000279928.2                        DDX11L17 ##     [3]                     ENSG00000279928.2                        DDX11L17 ##     [4]                     ENSG00000279928.2                        DDX11L17 ##     [5]                     ENSG00000279928.2                        DDX11L17 ##     ...                                   ...                             ... ##   [192]   ENSG00000290784.1,ENSG00000230092.8 ENSG00000290784,ENSG00000230092 ##   [193]   ENSG00000290784.1,ENSG00000230092.8 ENSG00000290784,ENSG00000230092 ##   [194]                     ENSG00000290784.1                 ENSG00000290784 ##   [195]                     ENSG00000290784.1                 ENSG00000290784 ##   [196] ENSG00000230021.10,ENSG00000230021.10 ENSG00000230021,ENSG00000230021 ##           exon_number ##         <IntegerList> ##     [1]             1 ##     [2]             2 ##     [3]             2 ##     [4]             3 ##     [5]             3 ##     ...           ... ##   [192]           3,2 ##   [193]           2,1 ##   [194]             2 ##   [195]             1 ##   [196]           1,1 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths sj <- sjFromExons(gtf$exon, extra_cols = ec, as = \"GInteractions\") subset(sj, transcript_name == \"DDX11L17-201\") ## GInteractions object with 4 interactions and 5 metadata columns: ##       seqnames1       ranges1     seqnames2       ranges2 |     transcript_id ##           <Rle>     <IRanges>         <Rle>     <IRanges> |       <character> ##   [1]      chr1 182745-182752 ---      chr1 183128-183132 | ENST00000624431.2 ##   [2]      chr1 183215-183222 ---      chr1 183490-183494 | ENST00000624431.2 ##   [3]      chr1 183570-183577 ---      chr1 183736-183740 | ENST00000624431.2 ##   [4]      chr1 183900-183907 ---      chr1 183977-183981 | ENST00000624431.2 ##       transcript_name           gene_id   gene_name        sj ##           <character>       <character> <character> <integer> ##   [1]    DDX11L17-201 ENSG00000279928.2    DDX11L17         1 ##   [2]    DDX11L17-201 ENSG00000279928.2    DDX11L17         2 ##   [3]    DDX11L17-201 ENSG00000279928.2    DDX11L17         3 ##   [4]    DDX11L17-201 ENSG00000279928.2    DDX11L17         4 ##   ------- ##   regions: 196 ranges and 0 metadata columns ##   seqinfo: 1 sequence from GRCh38 genome"},{"path":"https://smped.github.io/transmogR/articles/creating_a_new_reference.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Creating a Variant-Modified Reference","text":"","code":"## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] BSgenome.Hsapiens.UCSC.hg38_1.4.5 BSgenome_1.73.1                   ##  [3] BiocIO_1.15.2                     transmogR_1.1.3                   ##  [5] extraChIPs_1.9.6                  tibble_3.2.1                      ##  [7] ggside_0.3.1                      ggplot2_3.5.1                     ##  [9] BiocParallel_1.39.0               rtracklayer_1.65.0                ## [11] VariantAnnotation_1.51.1          Rsamtools_2.21.2                  ## [13] Biostrings_2.73.2                 XVector_0.45.0                    ## [15] SummarizedExperiment_1.35.4       Biobase_2.65.1                    ## [17] GenomicRanges_1.57.2              GenomeInfoDb_1.41.2               ## [19] IRanges_2.39.2                    S4Vectors_0.43.2                  ## [21] MatrixGenerics_1.17.0             matrixStats_1.4.1                 ## [23] BiocGenerics_0.51.3               BiocStyle_2.33.1                  ##  ## loaded via a namespace (and not attached): ##   [1] bitops_1.0-9               filelock_1.0.3             ##   [3] polyclip_1.10-7            XML_3.99-0.17              ##   [5] rpart_4.1.23               lifecycle_1.0.4            ##   [7] httr2_1.0.5                edgeR_4.3.19               ##   [9] MASS_7.3-61                lattice_0.22-6             ##  [11] ensembldb_2.29.1           backports_1.5.0            ##  [13] magrittr_2.0.3             limma_3.61.12              ##  [15] Hmisc_5.1-3                sass_0.4.9                 ##  [17] rmarkdown_2.28             jquerylib_0.1.4            ##  [19] yaml_2.3.10                metapod_1.13.0             ##  [21] Gviz_1.49.0                DBI_1.2.3                  ##  [23] RColorBrewer_1.1-3         abind_1.4-8                ##  [25] zlibbioc_1.51.1            purrr_1.0.2                ##  [27] AnnotationFilter_1.29.0    biovizBase_1.53.0          ##  [29] RCurl_1.98-1.16            nnet_7.3-19                ##  [31] tweenr_2.0.3               rappdirs_0.3.3             ##  [33] GenomeInfoDbData_1.2.13    ggrepel_0.9.6              ##  [35] pkgdown_2.1.1.9000         codetools_0.2-20           ##  [37] DelayedArray_0.31.14       ggforce_0.4.2              ##  [39] xml2_1.3.6                 tidyselect_1.2.1           ##  [41] futile.logger_1.4.3        UCSC.utils_1.1.0           ##  [43] farver_2.1.2               ComplexUpset_1.3.3         ##  [45] BiocFileCache_2.13.2       base64enc_0.1-3            ##  [47] GenomicAlignments_1.41.0   jsonlite_1.8.9             ##  [49] Formula_1.2-5              systemfonts_1.1.0          ##  [51] tools_4.4.1                progress_1.2.3             ##  [53] ragg_1.3.3                 Rcpp_1.0.13                ##  [55] glue_1.8.0                 gridExtra_2.3              ##  [57] SparseArray_1.5.45         xfun_0.48                  ##  [59] dplyr_1.1.4                withr_3.0.1                ##  [61] formatR_1.14               BiocManager_1.30.25        ##  [63] fastmap_1.2.0              latticeExtra_0.6-30        ##  [65] fansi_1.0.6                digest_0.6.37              ##  [67] R6_2.5.1                   textshaping_0.4.0          ##  [69] colorspace_2.1-1           jpeg_0.1-10                ##  [71] dichromat_2.0-0.1          biomaRt_2.61.3             ##  [73] RSQLite_2.3.7              utf8_1.2.4                 ##  [75] tidyr_1.3.1                generics_0.1.3             ##  [77] data.table_1.16.2          prettyunits_1.2.0          ##  [79] InteractionSet_1.33.0      httr_1.4.7                 ##  [81] htmlwidgets_1.6.4          S4Arrays_1.5.11            ##  [83] pkgconfig_2.0.3            gtable_0.3.5               ##  [85] blob_1.2.4                 htmltools_0.5.8.1          ##  [87] bookdown_0.41              ProtGenerics_1.37.1        ##  [89] scales_1.3.0               png_0.1-8                  ##  [91] knitr_1.48                 lambda.r_1.2.4             ##  [93] rstudioapi_0.17.0          rjson_0.2.23               ##  [95] checkmate_2.3.2            curl_5.2.3                 ##  [97] cachem_1.1.0               stringr_1.5.1              ##  [99] parallel_4.4.1             foreign_0.8-87             ## [101] AnnotationDbi_1.67.0       restfulr_0.0.15            ## [103] desc_1.4.3                 pillar_1.9.0               ## [105] grid_4.4.1                 vctrs_0.6.5                ## [107] dbplyr_2.5.0               cluster_2.1.6              ## [109] htmlTable_2.4.3            evaluate_1.0.1             ## [111] VennDiagram_1.7.3          GenomicFeatures_1.57.1     ## [113] cli_3.6.3                  locfit_1.5-9.10            ## [115] compiler_4.4.1             futile.options_1.0.1       ## [117] rlang_1.1.4                crayon_1.5.3               ## [119] labeling_0.4.3             interp_1.1-6               ## [121] forcats_1.0.0              fs_1.6.4                   ## [123] stringi_1.8.4              deldir_2.0-4               ## [125] munsell_0.5.1              lazyeval_0.2.2             ## [127] csaw_1.39.0                Matrix_1.7-1               ## [129] hms_1.1.3                  patchwork_1.3.0            ## [131] bit64_4.5.2                KEGGREST_1.45.1            ## [133] statmod_1.5.0              highr_0.11                 ## [135] igraph_2.1.1               broom_1.0.7                ## [137] memoise_2.0.1              bslib_0.8.0                ## [139] bit_4.5.0                  GenomicInteractions_1.39.0"},{"path":[]},{"path":"https://smped.github.io/transmogR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stevie Pederson. Author, maintainer.","code":""},{"path":"https://smped.github.io/transmogR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pederson S (2024). transmogR: Modify set reference sequences using set variants. R package version 1.1.3, https://github.com/smped/transmogR.","code":"@Manual{,   title = {transmogR: Modify a set of reference sequences using a set of variants},   author = {Stevie Pederson},   year = {2024},   note = {R package version 1.1.3},   url = {https://github.com/smped/transmogR}, }"},{"path":"https://smped.github.io/transmogR/index.html","id":"transmogr-","dir":"","previous_headings":"","what":"Modify a set of reference sequences using a set of variants","title":"Modify a set of reference sequences using a set of variants","text":"package contains functions creating variant-modified reference genome transcriptome. SNPs, Insertions Deletions supported. generous tip hat deep appreciation Bill Watterson. Results expected predictable prototype transmogrifiers. install stable version transmogR Bioconductor please try following. Alternatively, latest build can installed using","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"transmogR\") if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"smped/transmogR\")"},{"path":"https://smped.github.io/transmogR/reference/digestSalmon.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the output from salmon — digestSalmon","title":"Parse the output from salmon — digestSalmon","text":"Parse transcript counts additional data salmon","code":""},{"path":"https://smped.github.io/transmogR/reference/digestSalmon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the output from salmon — digestSalmon","text":"","code":"digestSalmon(   paths,   max_sets = 2L,   aux_dir = \"aux_info\",   name_fun = basename,   verbose = TRUE,   length_as_assay = FALSE,   ... )"},{"path":"https://smped.github.io/transmogR/reference/digestSalmon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the output from salmon — digestSalmon","text":"paths Vector file paths directories containing salmon results max_sets maximum number indexes permitted aux_dir Subdirectory bootstraps meta_info.json stored name_fun Function applied paths provide colnames returned object. Set NULL c() disable. verbose Print progress messages length_as_assay Output transcript lengths assay. May required using separate reference transcriptomes different samples ... used","code":""},{"path":"https://smped.github.io/transmogR/reference/digestSalmon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse the output from salmon — digestSalmon","text":"SummarizedExperiment object containing assays counts, scaledCounts, TPM effectiveLength. scaledCounts assay contains counts divided overdispersions. rowData returned object also include transcript-lengths along overdispersion estimates used return scaled counts.","code":""},{"path":"https://smped.github.io/transmogR/reference/digestSalmon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse the output from salmon — digestSalmon","text":"function based heavily edgeR::catchSalmon() important exceptions: SummarizedExperiment object returned Differing numbers transcripts allowed samples second point intended scenario samples may aligned full reference, remaining samples aligned partially masked reference (e.g. chrY). lead differing numbers transcripts within salmon index, however, common estimates overdispersions required scaling transcript-level counts. default, function error >2 different sets transcripts detected, however can modified using max_sets argument. SummarizedExperiment object returned also contain multiple assays, described ","code":""},{"path":"https://smped.github.io/transmogR/reference/genomogrify-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Mogrify a genome using a set of variants — genomogrify","title":"Mogrify a genome using a set of variants — genomogrify","text":"Use set SNPS, insertions deletions modify reference genome","code":""},{"path":"https://smped.github.io/transmogR/reference/genomogrify-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mogrify a genome using a set of variants — genomogrify","text":"","code":"genomogrify(x, var, ...)  # S4 method for class 'XStringSet,GRanges' genomogrify(   x,   var,   alt_col = \"ALT\",   mask = GRanges(),   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   verbose = TRUE,   ... )  # S4 method for class 'BSgenome,GRanges' genomogrify(   x,   var,   alt_col = \"ALT\",   mask = GRanges(),   names,   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   verbose = TRUE,   ... )  # S4 method for class 'BSgenome,VcfFile' genomogrify(   x,   var,   alt_col = \"ALT\",   mask = GRanges(),   names,   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   which,   verbose = TRUE,   ... )  # S4 method for class 'XStringSet,VcfFile' genomogrify(   x,   var,   alt_col = \"ALT\",   mask = GRanges(),   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   which,   verbose = TRUE,   ... )"},{"path":"https://smped.github.io/transmogR/reference/genomogrify-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mogrify a genome using a set of variants — genomogrify","text":"x DNAStringSet BSgenome var GRanges object containing variants, VariantAnnotation::VcfFile ... Passed parallel::mclapply alt_col name column var containing alternate bases mask Optional GRanges object defining regions masked 'N' tag Optional tag add sequence names modified sep Separator place seqnames names & tag var_tags logical(1) Add tags indicating type variant incorporated, 's', '' 'd' representing SNPs, Insertions Deletions respectively var_sep Separator previous tags variant tags verbose logical(1) Print progress messages running names Sequence names mogrified GRanges object passed VariantAnnotation::ScanVcfParam using VCF directly","code":""},{"path":"https://smped.github.io/transmogR/reference/genomogrify-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mogrify a genome using a set of variants — genomogrify","text":"XStringSet variant modified sequences","code":""},{"path":"https://smped.github.io/transmogR/reference/genomogrify-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mogrify a genome using a set of variants — genomogrify","text":"function designed create variant-modified reference genome, intended included set decoys using salmon selective alignment mode. Sequence lengths change InDels included coordinate-based information lost output function. Tags able added modified sequence assist identifying changes made sequence.","code":""},{"path":"https://smped.github.io/transmogR/reference/genomogrify-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mogrify a genome using a set of variants — genomogrify","text":"","code":"library(GenomicRanges) dna <- DNAStringSet(c(chr1 = \"ACGT\", chr2 = \"AATTT\")) var <- GRanges(c(\"chr1:1\", \"chr1:3\", \"chr2:1-3\")) var$ALT <- c(\"C\", \"GG\", \"A\") dna #> DNAStringSet object of length 2: #>     width seq                                               names                #> [1]     4 ACGT                                              chr1 #> [2]     5 AATTT                                             chr2 genomogrify(dna, var) #> Updating chr1; Original length: 4 #> ; Updated length: 5 #> Updating chr2; Original length: 5 #> ; Updated length: 3 #> DNAStringSet object of length 2: #>     width seq                                               names                #> [1]     5 CCGGT                                             chr1 #> [2]     3 ATT                                               chr2 genomogrify(dna, var, tag = \"mod\") #> Updating chr1; Original length: 4 #> ; Updated length: 5 #> Updating chr2; Original length: 5 #> ; Updated length: 3 #> DNAStringSet object of length 2: #>     width seq                                               names                #> [1]     5 CCGGT                                             chr1_mod #> [2]     3 ATT                                               chr2_mod genomogrify(dna, var, var_tags = TRUE) #> Updating chr1; Original length: 4 #> ; Updated length: 5 #> Updating chr2; Original length: 5 #> ; Updated length: 3 #> DNAStringSet object of length 2: #>     width seq                                               names                #> [1]     5 CCGGT                                             chr1_si #> [2]     3 ATT                                               chr2_d genomogrify(dna, var, mask = GRanges(\"chr2:1-5\"), var_tags = TRUE) #> Applying mask #> Updating chr1; Original length: 4 #> ; Updated length: 5 #> DNAStringSet object of length 2: #>     width seq                                               names                #> [1]     5 CCGGT                                             chr1_si #> [2]     5 NNNNN                                             chr2"},{"path":"https://smped.github.io/transmogR/reference/indelcator-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute InDels into one or more sequences — indelcator","title":"Substitute InDels into one or more sequences — indelcator","text":"Modify one sequences include Insertions Deletions","code":""},{"path":"https://smped.github.io/transmogR/reference/indelcator-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute InDels into one or more sequences — indelcator","text":"","code":"indelcator(x, indels, ...)  # S4 method for class 'XString,GRanges' indelcator(x, indels, exons, alt_col = \"ALT\", ...)  # S4 method for class 'DNAStringSet,GRanges' indelcator(x, indels, alt_col = \"ALT\", mc.cores = 1, verbose = TRUE, ...)  # S4 method for class 'BSgenome,GRanges' indelcator(x, indels, alt_col = \"ALT\", mc.cores = 1, names, ...)"},{"path":"https://smped.github.io/transmogR/reference/indelcator-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute InDels into one or more sequences — indelcator","text":"x Sequence class XString indels GRanges object InDel locations alternate allele ... Passed parallel::mclapply exons GRanges object containing exon structure x alt_col Column containing alternate allele mc.cores Number cores use calling parallel::mclapply internally verbose logical(1) Print messages names passed BSgenome::getSeq x BSgenome object","code":""},{"path":"https://smped.github.io/transmogR/reference/indelcator-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute InDels into one or more sequences — indelcator","text":"DNAStringSet XString object (See Details)","code":""},{"path":"https://smped.github.io/transmogR/reference/indelcator-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute InDels into one or more sequences — indelcator","text":"lower-level function relied transmogrify() genomogrify(). Takes Biostrings::XString Biostrings::XStringSet object modifies sequence incorporate InDels. expected types data determine behaviour, following expectations describing function incorporate data","code":""},{"path":[]},{"path":"https://smped.github.io/transmogR/reference/indelcator-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute InDels into one or more sequences — indelcator","text":"","code":"## Start with a DNAStringSet library(GenomicRanges) seq <- DNAStringSet(c(seq1 = \"AATCTGCGC\")) ## Define an Insertion var <- GRanges(\"seq1:1\") var$ALT <- \"AAA\" seq #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]     9 AATCTGCGC                                         seq1 indelcator(seq, var) #> Updating seq1; Original length: 9 #> ; Updated length: 11 #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]    11 AAAATCTGCGC                                       seq1  ## To modify a single transcript library(GenomicFeatures) #> Loading required package: AnnotationDbi #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ex <- GRanges(c(\"seq1:1-3:+\", \"seq1:7-9:+\")) orig <- extractTranscriptSeqs(seq, GRangesList(tx1 = ex))[[\"tx1\"]] orig #> 6-letter DNAString object #> seq: AATCGC indelcator(orig, var, exons = ex) #> 8-letter DNAString object #> seq: AAAATCGC"},{"path":"https://smped.github.io/transmogR/reference/overlapsByVar-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Count overlaps by variant type — overlapsByVar","title":"Count overlaps by variant type — overlapsByVar","text":"Count many variants type overlap ranges","code":""},{"path":"https://smped.github.io/transmogR/reference/overlapsByVar-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count overlaps by variant type — overlapsByVar","text":"","code":"overlapsByVar(x, var, ...)  # S4 method for class 'GRangesList,GRanges' overlapsByVar(x, var, alt_col = \"ALT\", ...)  # S4 method for class 'GRanges,GRanges' overlapsByVar(x, var, alt_col = \"ALT\", ...)"},{"path":"https://smped.github.io/transmogR/reference/overlapsByVar-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count overlaps by variant type — overlapsByVar","text":"x GRangesList features interest var Granges object variants interest ... Passed rowSums alt_col column within mcols(var) contains alternate allele","code":""},{"path":"https://smped.github.io/transmogR/reference/overlapsByVar-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count overlaps by variant type — overlapsByVar","text":"vector matrix","code":""},{"path":"https://smped.github.io/transmogR/reference/overlapsByVar-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count overlaps by variant type — overlapsByVar","text":"Taking GRanges GRangesList, count many variant type overlap region.","code":""},{"path":"https://smped.github.io/transmogR/reference/overlapsByVar-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count overlaps by variant type — overlapsByVar","text":"","code":"library(rtracklayer) library(VariantAnnotation) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘matrixStats’ #> The following objects are masked from ‘package:Biobase’: #>  #>     anyMissing, rowMedians #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> The following object is masked from ‘package:Biobase’: #>  #>     rowMedians #> Loading required package: SummarizedExperiment #> Loading required package: Rsamtools #>  #> Attaching package: ‘VariantAnnotation’ #> The following object is masked from ‘package:base’: #>  #>     tabulate gtf <- import.gff(     system.file(\"extdata/gencode.v44.subset.gtf.gz\", package = \"transmogR\") ) grl <- splitAsList(gtf, gtf$type) vcf <- system.file(\"extdata/1000GP_subset.vcf.gz\", package = \"transmogR\") var <- rowRanges(readVcf(vcf, param = ScanVcfParam(fixed = \"ALT\"))) overlapsByVar(grl, var) #>            Deletion Insertion SNV Total #> gene              6         1  91    98 #> transcript        6         1  91    98 #> exon              0         1  37    38"},{"path":"https://smped.github.io/transmogR/reference/owl-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"OverWrite Letters in an XStringSet — owl","title":"OverWrite Letters in an XStringSet — owl","text":"OverWrite Letters (e.g. SNPs) XStringSet","code":""},{"path":"https://smped.github.io/transmogR/reference/owl-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OverWrite Letters in an XStringSet — owl","text":"","code":"owl(seq, snps, ...)  # S4 method for class 'XStringSet,GRanges' owl(seq, snps, alt_col = \"ALT\", ...)  # S4 method for class 'BSgenome,GRanges' owl(seq, snps, alt_col = \"ALT\", names, ...)"},{"path":"https://smped.github.io/transmogR/reference/owl-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OverWrite Letters in an XStringSet — owl","text":"seq BSgenome, DNAStringSet, RNAStringSet XStringSet. snps GRanges object SNP positions column containing alternate allele ... Passed Biostrings::replaceLetterAt() alt_col Column name mcols element snps containing alternate allele names Sequence names operate ","code":""},{"path":"https://smped.github.io/transmogR/reference/owl-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OverWrite Letters in an XStringSet — owl","text":"object class original object, SNPs inserted supplied positions","code":""},{"path":"https://smped.github.io/transmogR/reference/owl-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OverWrite Letters in an XStringSet — owl","text":"lower-level function called transmogrify() genomogrify(), able called user needed Note providing BSgenome object, first coerced DNAStringSet can time consuming.","code":""},{"path":"https://smped.github.io/transmogR/reference/owl-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OverWrite Letters in an XStringSet — owl","text":"","code":"seq <- DNAStringSet(c(chr1 = \"AAGC\")) snps <- GRanges(\"chr1:2\") snps$ALT <- \"G\" snps #> GRanges object with 1 range and 1 metadata column: #>       seqnames    ranges strand |         ALT #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]     chr1         2      * |           G #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths seq #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]     4 AAGC                                              chr1 owl(seq, snps) #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]     4 AGGC                                              chr1"},{"path":"https://smped.github.io/transmogR/reference/parY-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the PAR-Y Regions From a Seqinfo Object — parY","title":"Get the PAR-Y Regions From a Seqinfo Object — parY","text":"Define Pseudo-Autosomal Regions Seqinfo Object","code":""},{"path":"https://smped.github.io/transmogR/reference/parY-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the PAR-Y Regions From a Seqinfo Object — parY","text":"","code":"parY(x, ...)  # S4 method for class 'Seqinfo' parY(x, ...)  # S4 method for class 'character' parY(x, prefix = NULL, ...)"},{"path":"https://smped.github.io/transmogR/reference/parY-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the PAR-Y Regions From a Seqinfo Object — parY","text":"x Seqinfo object named build. passing character vector, match.arg() used match build. ... used prefix Optional prefix place chromosome names. Can NULL, \"\" \"chr\"","code":""},{"path":"https://smped.github.io/transmogR/reference/parY-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the PAR-Y Regions From a Seqinfo Object — parY","text":"GenomicRanges object","code":""},{"path":"https://smped.github.io/transmogR/reference/parY-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the PAR-Y Regions From a Seqinfo Object — parY","text":"Using seqinfo object based either hg38, hg19, CHM13.v2 variations, create GRanges object Pseudo-Autosomal Regions Y chromosome build. length Y chromosome seqinfo object used determine correct genome build passing Seqinfo object. Otherwise additional mcols column called PAR indicate PAR1 PAR2","code":""},{"path":"https://smped.github.io/transmogR/reference/parY-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the PAR-Y Regions From a Seqinfo Object — parY","text":"","code":"library(GenomeInfoDb) sq <- Seqinfo(     seqnames = \"chrY\", seqlengths = 59373566, genome = \"hg19_only_chrY\" ) parY(sq) #> GRanges object with 2 ranges and 1 metadata column: #>       seqnames            ranges strand |         PAR #>          <Rle>         <IRanges>  <Rle> | <character> #>   [1]     chrY     10001-2649520      * |        PAR1 #>   [2]     chrY 59034050-59363566      * |        PAR2 #>   ------- #>   seqinfo: 1 sequence from hg19_only_chrY genome  ## PAR regions for CHM13 are also available sq <- Seqinfo(     seqnames = \"chrY\", seqlengths = 62460029, genome = \"CHM13\" ) parY(sq) #> GRanges object with 2 ranges and 1 metadata column: #>       seqnames            ranges strand |         PAR #>          <Rle>         <IRanges>  <Rle> | <character> #>   [1]     chrY         1-2458320      * |        PAR1 #>   [2]     chrY 62122809-62460029      * |        PAR2 #>   ------- #>   seqinfo: 1 sequence from CHM13 genome  ## Or just call by name parY(\"GRCh38\", prefix = \"chr\") #> GRanges object with 2 ranges and 1 metadata column: #>       seqnames            ranges strand |         PAR #>          <Rle>         <IRanges>  <Rle> | <character> #>   [1]     chrY     10001-2781479      * |        PAR1 #>   [2]     chrY 56887903-57217415      * |        PAR2 #>   ------- #>   seqinfo: 1 sequence from GRCh38 genome; no seqlengths"},{"path":"https://smped.github.io/transmogR/reference/sjFromExons.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","title":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","text":"Using GRanges defining exons transcripts, find splice-junctions","code":""},{"path":"https://smped.github.io/transmogR/reference/sjFromExons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","text":"","code":"sjFromExons(   x,   rank_col = c(\"exon_number\", \"exon_rank\"),   tx_col = c(\"transcript_id\", \"tx_id\"),   extra_cols = \"all\",   don_len = 8,   acc_len = 5,   as = c(\"GRanges\", \"GInteractions\"),   ... )"},{"path":"https://smped.github.io/transmogR/reference/sjFromExons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","text":"x GRanges object exons transcripts. column indicating position (rank) exon within transcript must included. rank_col column containing position exons within transcript tx_col column containing unique transcript-level identifiers extra_cols Can vector column names return beyond rank_col tx_col. default columns returned (extra_cols = \"\"). don_len, acc_len Length donor acceptor sites respectively Return set GenomicRanges, splice junction annotated GenomicInteraction ... used","code":""},{"path":"https://smped.github.io/transmogR/reference/sjFromExons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","text":"GRanges object requested columns, additional column, 'site', annotating region donor acceptor site. Alternatively, specifying = \"GInteractions\", junctions can returned splice junction annotated GenomicInteraction. can make set junctions easier interpret given transcript.","code":""},{"path":"https://smped.github.io/transmogR/reference/sjFromExons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","text":"canonical splice junction consists donor site acceptor site end intron, branching site somewhere wthin intron. Canonical donor sites 8nt long first two bases exonic next 6 derived form intronic sequences. Canonical acceptor sites 5nt long first four bases intronic final base first base next exon. functions uses set exons within transcript identify donor acceptor sites. Branch sites identified.","code":""},{"path":"https://smped.github.io/transmogR/reference/sjFromExons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain Splice-Junctions from Exons and Transcripts — sjFromExons","text":"","code":"library(rtracklayer) gtf_cols <- c(   \"transcript_id\", \"transcript_name\", \"gene_id\", \"gene_name\", \"exon_number\" ) gtf <- import.gff(    system.file(\"extdata/gencode.v44.subset.gtf.gz\", package = \"transmogR\"),    feature.type = \"exon\", colnames = gtf_cols ) sj <- sjFromExons(gtf) sj #> GRanges object with 730 ranges and 6 metadata columns: #>         seqnames        ranges strand |        site     transcript_id #>            <Rle>     <IRanges>  <Rle> | <character>       <character> #>     [1]     chr1 182745-182752      + |       donor ENST00000624431.2 #>     [2]     chr1 183128-183132      + |    acceptor ENST00000624431.2 #>     [3]     chr1 183215-183222      + |       donor ENST00000624431.2 #>     [4]     chr1 183490-183494      + |    acceptor ENST00000624431.2 #>     [5]     chr1 183570-183577      + |       donor ENST00000624431.2 #>     ...      ...           ...    ... .         ...               ... #>   [726]     chr1 810061-810068      - |       donor ENST00000590817.3 #>   [727]     chr1 810170-810174      - |    acceptor ENST00000447500.4 #>   [728]     chr1 817367-817374      - |       donor ENST00000447500.4 #>   [729]     chr1 827664-827671      - |       donor ENST00000635509.2 #>   [730]     chr1 827664-827671      - |       donor ENST00000634337.2 #>         transcript_name            gene_id       gene_name exon_number #>             <character>        <character>     <character>   <integer> #>     [1]    DDX11L17-201  ENSG00000279928.2        DDX11L17           1 #>     [2]    DDX11L17-201  ENSG00000279928.2        DDX11L17           2 #>     [3]    DDX11L17-201  ENSG00000279928.2        DDX11L17           2 #>     [4]    DDX11L17-201  ENSG00000279928.2        DDX11L17           3 #>     [5]    DDX11L17-201  ENSG00000279928.2        DDX11L17           3 #>     ...             ...                ...             ...         ... #>   [726] ENST00000590817  ENSG00000230092.8 ENSG00000230092           1 #>   [727] ENST00000447500  ENSG00000290784.1 ENSG00000290784           2 #>   [728] ENST00000447500  ENSG00000290784.1 ENSG00000290784           1 #>   [729] ENST00000635509 ENSG00000230021.10 ENSG00000230021           1 #>   [730] ENST00000634337 ENSG00000230021.10 ENSG00000230021           1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Or to simplify shared splice junctions across multiple transcripts library(extraChIPs, quietly = TRUE) #> Registered S3 method overwritten by 'ggside': #>   method from    #>   +.gg   ggplot2 chopMC(sj) #> GRanges object with 196 ranges and 6 metadata columns: #>         seqnames        ranges strand |        site #>            <Rle>     <IRanges>  <Rle> | <character> #>     [1]     chr1 182745-182752      + |       donor #>     [2]     chr1 183128-183132      + |    acceptor #>     [3]     chr1 183215-183222      + |       donor #>     [4]     chr1 183490-183494      + |    acceptor #>     [5]     chr1 183570-183577      + |       donor #>     ...      ...           ...    ... .         ... #>   [192]     chr1 808623-808627      - |    acceptor #>   [193]     chr1 810061-810068      - |       donor #>   [194]     chr1 810170-810174      - |    acceptor #>   [195]     chr1 817367-817374      - |       donor #>   [196]     chr1 827664-827671      - |       donor #>                               transcript_id                 transcript_name #>                             <CharacterList>                 <CharacterList> #>     [1]                   ENST00000624431.2                    DDX11L17-201 #>     [2]                   ENST00000624431.2                    DDX11L17-201 #>     [3]                   ENST00000624431.2                    DDX11L17-201 #>     [4]                   ENST00000624431.2                    DDX11L17-201 #>     [5]                   ENST00000624431.2                    DDX11L17-201 #>     ...                                 ...                             ... #>   [192] ENST00000447500.4,ENST00000590817.3 ENST00000447500,ENST00000590817 #>   [193] ENST00000447500.4,ENST00000590817.3 ENST00000447500,ENST00000590817 #>   [194]                   ENST00000447500.4                 ENST00000447500 #>   [195]                   ENST00000447500.4                 ENST00000447500 #>   [196] ENST00000635509.2,ENST00000634337.2 ENST00000635509,ENST00000634337 #>                                       gene_id                       gene_name #>                               <CharacterList>                 <CharacterList> #>     [1]                     ENSG00000279928.2                        DDX11L17 #>     [2]                     ENSG00000279928.2                        DDX11L17 #>     [3]                     ENSG00000279928.2                        DDX11L17 #>     [4]                     ENSG00000279928.2                        DDX11L17 #>     [5]                     ENSG00000279928.2                        DDX11L17 #>     ...                                   ...                             ... #>   [192]   ENSG00000290784.1,ENSG00000230092.8 ENSG00000290784,ENSG00000230092 #>   [193]   ENSG00000290784.1,ENSG00000230092.8 ENSG00000290784,ENSG00000230092 #>   [194]                     ENSG00000290784.1                 ENSG00000290784 #>   [195]                     ENSG00000290784.1                 ENSG00000290784 #>   [196] ENSG00000230021.10,ENSG00000230021.10 ENSG00000230021,ENSG00000230021 #>           exon_number #>         <IntegerList> #>     [1]             1 #>     [2]             2 #>     [3]             2 #>     [4]             3 #>     [5]             3 #>     ...           ... #>   [192]           3,2 #>   [193]           2,1 #>   [194]             2 #>   [195]             1 #>   [196]           1,1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Splice Junctions can also be returned as a GInteractions object with ## anchorOne as the donor & anchorTwo as the acceptor sites sjFromExons(gtf, as = \"GInteractions\") #> GInteractions object with 365 interactions and 5 metadata columns: #>         seqnames1       ranges1     seqnames2       ranges2 |     transcript_id #>             <Rle>     <IRanges>         <Rle>     <IRanges> |       <character> #>     [1]      chr1 182745-182752 ---      chr1 183128-183132 | ENST00000624431.2 #>     [2]      chr1 183215-183222 ---      chr1 183490-183494 | ENST00000624431.2 #>     [3]      chr1 183570-183577 ---      chr1 183736-183740 | ENST00000624431.2 #>     [4]      chr1 183900-183907 ---      chr1 183977-183981 | ENST00000624431.2 #>     [5]      chr1 724359-724366 ---      chr1 724714-724718 | ENST00000440782.3 #>     ...       ...           ... ...       ...           ... .               ... #>   [361]      chr1 817367-817374 ---      chr1 774280-774284 | ENST00000447500.4 #>   [362]      chr1 827664-827671 ---      chr1 801163-801167 | ENST00000635509.2 #>   [363]      chr1 827664-827671 ---      chr1 805891-805895 | ENST00000634337.2 #>   [364]      chr1 720026-720033 ---      chr1 805891-805895 | ENST00000414688.6 #>   [365]      chr1 711705-711712 ---      chr1 808623-808627 | ENST00000635509.2 #>         transcript_name            gene_id       gene_name        sj #>             <character>        <character>     <character> <integer> #>     [1]    DDX11L17-201  ENSG00000279928.2        DDX11L17         1 #>     [2]    DDX11L17-201  ENSG00000279928.2        DDX11L17         2 #>     [3]    DDX11L17-201  ENSG00000279928.2        DDX11L17         3 #>     [4]    DDX11L17-201  ENSG00000279928.2        DDX11L17         4 #>     [5]       CICP3-201  ENSG00000229376.3           CICP3         1 #>     ...             ...                ...             ...       ... #>   [361] ENST00000447500  ENSG00000290784.1 ENSG00000290784         1 #>   [362] ENST00000635509 ENSG00000230021.10 ENSG00000230021         1 #>   [363] ENST00000634337 ENSG00000230021.10 ENSG00000230021         1 #>   [364] ENST00000414688 ENSG00000230021.10 ENSG00000230021         2 #>   [365] ENST00000635509 ENSG00000230021.10 ENSG00000230021         2 #>   ------- #>   regions: 196 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://smped.github.io/transmogR/reference/transmogR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"transmogR: Create a variant-modified reference transcriptome — transmogR-package","title":"transmogR: Create a variant-modified reference transcriptome — transmogR-package","text":"package transmogR designed creation variant-modified reference transcriptome","code":""},{"path":"https://smped.github.io/transmogR/reference/transmogR-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"transmogR: Create a variant-modified reference transcriptome — transmogR-package","text":"package transmogR provides two primary functions modifying complete transcriptomes genomes: transmogrify() incorporating supplied variants transcriptomic sequences, genomogrify() incorporating supplied variants genomic sequences, ideally passed decoy sequences tool salmon. main functions rely lower-level functions : owl() -writes letters (.e. SNPs) within sequence, indelcator() incorporates InDels individual sequence Additional utility functions provided allow characterisation exploration set variants: overlapsByVar() counts variants overlap sets GenomicRanges, first splitting variants SNV, Insertions Deletions parY() returns pseudo-autosomal regions chosen genome build GenomicRanges object upsetVarByCol() produces UpSet plot counting many unique IDs impacted set o variants. IDs can represent column supplied ranges, gene_id transcript_id varTypes() classifies set variants SNV, Insertions Deletions","code":""},{"path":[]},{"path":"https://smped.github.io/transmogR/reference/transmogR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"transmogR: Create a variant-modified reference transcriptome — transmogR-package","text":"Stevie Pederson","code":""},{"path":"https://smped.github.io/transmogR/reference/transmogrify-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Mogrify a transcriptome using a set of variants — transmogrify","title":"Mogrify a transcriptome using a set of variants — transmogrify","text":"Use set SNPs, insertions deletions modify reference transcriptome","code":""},{"path":"https://smped.github.io/transmogR/reference/transmogrify-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mogrify a transcriptome using a set of variants — transmogrify","text":"","code":"transmogrify(x, var, exons, ...)  # S4 method for class 'XStringSet,GRanges,GRanges' transmogrify(   x,   var,   exons,   alt_col = \"ALT\",   trans_col = \"transcript_id\",   omit_ranges = NULL,   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   verbose = TRUE,   mc.cores = 1,   ... )  # S4 method for class 'BSgenome,GRanges,GRanges' transmogrify(   x,   var,   exons,   alt_col = \"ALT\",   trans_col = \"transcript_id\",   omit_ranges = NULL,   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   verbose = TRUE,   mc.cores = 1,   ... )  # S4 method for class 'BSgenome,VcfFile,GRanges' transmogrify(   x,   var,   exons,   alt_col = \"ALT\",   trans_col = \"transcript_id\",   omit_ranges = NULL,   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   verbose = TRUE,   mc.cores = 1,   which,   ... )  # S4 method for class 'XStringSet,VcfFile,GRanges' transmogrify(   x,   var,   exons,   alt_col = \"ALT\",   trans_col = \"transcript_id\",   omit_ranges = NULL,   tag = NULL,   sep = \"_\",   var_tags = FALSE,   var_sep = \"_\",   verbose = TRUE,   mc.cores = 1,   which,   ... )"},{"path":"https://smped.github.io/transmogR/reference/transmogrify-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mogrify a transcriptome using a set of variants — transmogrify","text":"x Reference genome either DNAStringSet BSgenome var GRanges object containing variants exons GRanges object ranges representing exons ... Passed parallel::mclapply alt_col Column var containing alternate bases trans_col Column 'exons' containing transcript_id omit_ranges GRanges object containing ranges omit, PAR-Y regions, example tag Optional tag add sequence names modified sep Separator place seqnames names & tag var_tags logical(1) Add tags indicating type variant incorporated, 's', '' 'd' representing SNPs, Insertions Deletions respectively var_sep Separator previous tags variant tags verbose logical(1) Include informative messages, operate silently mc.cores Number cores used multi-threading via parallel::mclapply GRanges object passed VariantAnnotation::ScanVcfParam using VCF directly","code":""},{"path":"https://smped.github.io/transmogR/reference/transmogrify-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mogrify a transcriptome using a set of variants — transmogrify","text":"XStringSet","code":""},{"path":"https://smped.github.io/transmogR/reference/transmogrify-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mogrify a transcriptome using a set of variants — transmogrify","text":"Produce set variant modified transcript sequences standard reference genome. Supported variants SNPs, Insertions Deletions Ranges needing masked, Y-chromosome, Y-PAR can provided. noted time consuming process Inclusion large set insertions deletions across entire transcriptome can involve individually modifying many thousands transcripts, can computationally demanding task. Whilst can parallelised using appropriate number cores, may also prove taxing lower power laptops, pre-emptively closing memory hungry programs Slack, internet browers may prudent.","code":""},{"path":"https://smped.github.io/transmogR/reference/transmogrify-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mogrify a transcriptome using a set of variants — transmogrify","text":"","code":"library(GenomicRanges) library(GenomicFeatures) seq <- DNAStringSet(c(chr1 = \"ACGTAAATGG\")) exons <- GRanges(c(\"chr1:1-3:-\", \"chr1:7-9:-\")) exons$transcript_id <- c(\"trans1\")  # When using extractTranscriptSeqs -stranded exons need to be sorted by end exons <- sort(exons, decreasing = TRUE, by = ~end) exons #> GRanges object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand | transcript_id #>          <Rle> <IRanges>  <Rle> |   <character> #>   [1]     chr1       7-9      - |        trans1 #>   [2]     chr1       1-3      - |        trans1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths trByExon <- splitAsList(exons, exons$transcript_id)  # Check the sequences seq #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]    10 ACGTAAATGG                                        chr1 extractTranscriptSeqs(seq, trByExon) #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]     6 CATCGT                                            trans1  # Define some variants var <- GRanges(c(\"chr1:2\", \"chr1:8\")) var$ALT <- c(\"A\", \"GGG\")  # Include the variants adding tags to indicate a SNP and indel # The exons GRanges object will be split by transcript internally transmogrify(seq, var, exons, var_tags = TRUE) #> 1 transcripts found with indels #> DNAStringSet object of length 1: #>     width seq                                               names                #> [1]     8 CCCCTCTT                                          trans1_si"},{"path":"https://smped.github.io/transmogR/reference/upsetVarByCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Variants by Impacted Columns — upsetVarByCol","title":"Show Variants by Impacted Columns — upsetVarByCol","text":"Produce UpSet plot showing unique values given column","code":""},{"path":"https://smped.github.io/transmogR/reference/upsetVarByCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Variants by Impacted Columns — upsetVarByCol","text":"","code":"upsetVarByCol(   gr,   var,   alt_col = \"ALT\",   mcol = \"transcript_id\",   ...,   intersection_args = list(),   intersection_lab = \"Intersection Size\",   set_geom = geom_bar(width = 0.6),   set_expand = 0.2,   set_counts = TRUE,   hjust_counts = 1.1,   set_lab = \"Set Size\",   title )"},{"path":"https://smped.github.io/transmogR/reference/upsetVarByCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Variants by Impacted Columns — upsetVarByCol","text":"gr GRanges object ranges representing key feature exons var GRanges object variants given column alt_col Column within var containing alternate allele mcol column within gr summarise results ... Passed ComplexUpset::upset intersection_args See ComplexUpset::intersection_size possible values intersection_lab Y-axis label intersection panel set_geom Passed ComplexUpset::upset_set_size set_expand Expand set-size axis amount set_counts logical(1) Show counts set sizes hjust_counts Horizontal adjustment counts, shown set_lab X-axis label set-sizes panel title Summary title show intersection panel. Can hidden setting NULL","code":""},{"path":"https://smped.github.io/transmogR/reference/upsetVarByCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Variants by Impacted Columns — upsetVarByCol","text":"UpSet plot","code":""},{"path":"https://smped.github.io/transmogR/reference/upsetVarByCol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show Variants by Impacted Columns — upsetVarByCol","text":"Take set variants, classify SNV, Insertion Deletion, using GRanges object, produce UpSet plot showing impacted values given column","code":""},{"path":[]},{"path":"https://smped.github.io/transmogR/reference/upsetVarByCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Variants by Impacted Columns — upsetVarByCol","text":"","code":"library(rtracklayer) library(VariantAnnotation) gtf <- import.gff(     system.file(\"extdata/gencode.v44.subset.gtf.gz\", package = \"transmogR\"),     feature.type = \"exon\" ) vcf <- system.file(\"extdata/1000GP_subset.vcf.gz\", package = \"transmogR\") var <- rowRanges(readVcf(vcf, param = ScanVcfParam(fixed = \"ALT\"))) upsetVarByCol(gtf, var)"},{"path":"https://smped.github.io/transmogR/reference/varTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify SNVs, Insertions and Deletions — varTypes","title":"Identify SNVs, Insertions and Deletions — varTypes","text":"Identify SNVs, Insertions Deletions within GRanges object","code":""},{"path":"https://smped.github.io/transmogR/reference/varTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify SNVs, Insertions and Deletions — varTypes","text":"","code":"varTypes(x, alt_col = \"ALT\", ...)"},{"path":"https://smped.github.io/transmogR/reference/varTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify SNVs, Insertions and Deletions — varTypes","text":"x GenomicRanges object alt_col Name column mcols(x) contains alternate allele. Can XStringSetList, XStringSet character ... used","code":""},{"path":"https://smped.github.io/transmogR/reference/varTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify SNVs, Insertions and Deletions — varTypes","text":"Character vector","code":""},{"path":"https://smped.github.io/transmogR/reference/varTypes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify SNVs, Insertions and Deletions — varTypes","text":"Using width reference alternate alleles, classify range SNV, Insertion Deletion. SNVs expected REF & ALT widths 1 Insertions expected ALT longer REF Deletions expected ALT shorter REF relatively permissive criteria","code":""},{"path":"https://smped.github.io/transmogR/reference/varTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify SNVs, Insertions and Deletions — varTypes","text":"","code":"# Load the example VCF and classify ranges library(VariantAnnotation) f <- system.file(\"extdata/1000GP_subset.vcf.gz\", package = \"transmogR\") vcf <- readVcf(f) gr <- rowRanges(vcf) type <- varTypes(gr) table(type) #> type #>  Deletion Insertion       SNV  #>         6         1        93  gr[type != \"SNV\"] #> GRanges object with 7 ranges and 5 metadata columns: #>                         seqnames        ranges strand | paramRangeID #>                            <Rle>     <IRanges>  <Rle> |     <factor> #>          1:788418:CAG:C     chr1 788418-788420      * |           NA #>       1:789568:TATGGA:T     chr1 789568-789573      * |           NA #>   1:790933:CGAATGGAAT:C     chr1 790933-790943      * |           NA #>          1:818464:CCT:C     chr1 818464-818466      * |           NA #>           1:826577:A:AT     chr1        826577      * |           NA #>   1:839480:CACACACCTG:C     chr1 839480-839494      * |           NA #>   1:839515:CTAGACACAC:C     chr1 839515-839543      * |           NA #>                                             REF                ALT      QUAL #>                                  <DNAStringSet> <DNAStringSetList> <numeric> #>          1:788418:CAG:C                     CAG                  C        NA #>       1:789568:TATGGA:T                  TATGGA                  T        NA #>   1:790933:CGAATGGAAT:C             CGAATGGAATG                  C        NA #>          1:818464:CCT:C                     CCT                  C        NA #>           1:826577:A:AT                       A                 AT        NA #>   1:839480:CACACACCTG:C         CACACACCTGGACAA                  C        NA #>   1:839515:CTAGACACAC:C CTAGACACAC...CACACACACG                  C        NA #>                              FILTER #>                         <character> #>          1:788418:CAG:C           . #>       1:789568:TATGGA:T           . #>   1:790933:CGAATGGAAT:C           . #>          1:818464:CCT:C           . #>           1:826577:A:AT           . #>   1:839480:CACACACCTG:C           . #>   1:839515:CTAGACACAC:C           . #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://smped.github.io/transmogR/news/index.html","id":"transmogr-100","dir":"Changelog","previous_headings":"","what":"transmogR 1.0.0","title":"transmogR 1.0.0","text":"Initial Bioc Release","code":""},{"path":"https://smped.github.io/transmogR/news/index.html","id":"transmogr-111","dir":"Changelog","previous_headings":"","what":"transmogR 1.1.1","title":"transmogR 1.1.1","text":"Added digestSalmon()","code":""}]
